generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Event {
  id               String  @id @default(uuid())
  title            String
  details          String? // o ? indica que é opcional
  slug             String  @unique
  maximumAttendees Int?    @map("maximum_attendees") // @map renomea o nome da coluna no banco de dados para maximus_attendees

  attendees Attendee[] // cria a associação dos attendees com a tabela events

  @@map("events")
}

model Attendee {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  createdAt DateTime @default(now()) @map("created_at")
  eventId   String   @map("event_id")

<<<<<<< HEAD
  event Event @relation(fields: [eventId], references: [id]) // faz o foreignKey baseado no evento que o participante está
=======
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade) // faz o foreignKey baseado no evento que o participante está
  checkIn CheckIn? // indica que é opcional ter um checkin
>>>>>>> f83a3518da26f2a3c5b975263e3046fec5154f82

  @@unique([eventId, email]) // essa linha faz a verificação para o email ser unico por evento
  @@map("attendees")
}
<<<<<<< HEAD
=======

model CheckIn {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")

  attende    Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  attendeeId Int      @unique @map("attendee_id")

  @@map("check_ins")
}
>>>>>>> f83a3518da26f2a3c5b975263e3046fec5154f82
